/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.theodorecurtil.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2067778050195001787L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.theodorecurtil.schemas\",\"fields\":[{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"direction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"index_price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"instrument_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"iv\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"mark_price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"tick_direction\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"trade_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"trade_seq\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Data> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Data> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Data> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Data> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Data> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Data to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Data from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Data instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Data fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Double amount;
  private java.lang.String direction;
  private java.lang.Double index_price;
  private java.lang.String instrument_name;
  private java.lang.Double iv;
  private java.lang.Double mark_price;
  private java.lang.Double price;
  private java.lang.Integer tick_direction;
  private java.lang.Long timestamp;
  private java.lang.String trade_id;
  private java.lang.Integer trade_seq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Data() {}

  /**
   * All-args constructor.
   * @param amount The new value for amount
   * @param direction The new value for direction
   * @param index_price The new value for index_price
   * @param instrument_name The new value for instrument_name
   * @param iv The new value for iv
   * @param mark_price The new value for mark_price
   * @param price The new value for price
   * @param tick_direction The new value for tick_direction
   * @param timestamp The new value for timestamp
   * @param trade_id The new value for trade_id
   * @param trade_seq The new value for trade_seq
   */
  public Data(java.lang.Double amount, java.lang.String direction, java.lang.Double index_price, java.lang.String instrument_name, java.lang.Double iv, java.lang.Double mark_price, java.lang.Double price, java.lang.Integer tick_direction, java.lang.Long timestamp, java.lang.String trade_id, java.lang.Integer trade_seq) {
    this.amount = amount;
    this.direction = direction;
    this.index_price = index_price;
    this.instrument_name = instrument_name;
    this.iv = iv;
    this.mark_price = mark_price;
    this.price = price;
    this.tick_direction = tick_direction;
    this.timestamp = timestamp;
    this.trade_id = trade_id;
    this.trade_seq = trade_seq;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return amount;
    case 1: return direction;
    case 2: return index_price;
    case 3: return instrument_name;
    case 4: return iv;
    case 5: return mark_price;
    case 6: return price;
    case 7: return tick_direction;
    case 8: return timestamp;
    case 9: return trade_id;
    case 10: return trade_seq;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: amount = (java.lang.Double)value$; break;
    case 1: direction = value$ != null ? value$.toString() : null; break;
    case 2: index_price = (java.lang.Double)value$; break;
    case 3: instrument_name = value$ != null ? value$.toString() : null; break;
    case 4: iv = (java.lang.Double)value$; break;
    case 5: mark_price = (java.lang.Double)value$; break;
    case 6: price = (java.lang.Double)value$; break;
    case 7: tick_direction = (java.lang.Integer)value$; break;
    case 8: timestamp = (java.lang.Long)value$; break;
    case 9: trade_id = value$ != null ? value$.toString() : null; break;
    case 10: trade_seq = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public java.lang.String getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(java.lang.String value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'index_price' field.
   * @return The value of the 'index_price' field.
   */
  public java.lang.Double getIndexPrice() {
    return index_price;
  }


  /**
   * Sets the value of the 'index_price' field.
   * @param value the value to set.
   */
  public void setIndexPrice(java.lang.Double value) {
    this.index_price = value;
  }

  /**
   * Gets the value of the 'instrument_name' field.
   * @return The value of the 'instrument_name' field.
   */
  public java.lang.String getInstrumentName() {
    return instrument_name;
  }


  /**
   * Sets the value of the 'instrument_name' field.
   * @param value the value to set.
   */
  public void setInstrumentName(java.lang.String value) {
    this.instrument_name = value;
  }

  /**
   * Gets the value of the 'iv' field.
   * @return The value of the 'iv' field.
   */
  public java.lang.Double getIv() {
    return iv;
  }


  /**
   * Sets the value of the 'iv' field.
   * @param value the value to set.
   */
  public void setIv(java.lang.Double value) {
    this.iv = value;
  }

  /**
   * Gets the value of the 'mark_price' field.
   * @return The value of the 'mark_price' field.
   */
  public java.lang.Double getMarkPrice() {
    return mark_price;
  }


  /**
   * Sets the value of the 'mark_price' field.
   * @param value the value to set.
   */
  public void setMarkPrice(java.lang.Double value) {
    this.mark_price = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'tick_direction' field.
   * @return The value of the 'tick_direction' field.
   */
  public java.lang.Integer getTickDirection() {
    return tick_direction;
  }


  /**
   * Sets the value of the 'tick_direction' field.
   * @param value the value to set.
   */
  public void setTickDirection(java.lang.Integer value) {
    this.tick_direction = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'trade_id' field.
   * @return The value of the 'trade_id' field.
   */
  public java.lang.String getTradeId() {
    return trade_id;
  }


  /**
   * Sets the value of the 'trade_id' field.
   * @param value the value to set.
   */
  public void setTradeId(java.lang.String value) {
    this.trade_id = value;
  }

  /**
   * Gets the value of the 'trade_seq' field.
   * @return The value of the 'trade_seq' field.
   */
  public java.lang.Integer getTradeSeq() {
    return trade_seq;
  }


  /**
   * Sets the value of the 'trade_seq' field.
   * @param value the value to set.
   */
  public void setTradeSeq(java.lang.Integer value) {
    this.trade_seq = value;
  }

  /**
   * Creates a new Data RecordBuilder.
   * @return A new Data RecordBuilder
   */
  public static com.theodorecurtil.schemas.Data.Builder newBuilder() {
    return new com.theodorecurtil.schemas.Data.Builder();
  }

  /**
   * Creates a new Data RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Data RecordBuilder
   */
  public static com.theodorecurtil.schemas.Data.Builder newBuilder(com.theodorecurtil.schemas.Data.Builder other) {
    if (other == null) {
      return new com.theodorecurtil.schemas.Data.Builder();
    } else {
      return new com.theodorecurtil.schemas.Data.Builder(other);
    }
  }

  /**
   * Creates a new Data RecordBuilder by copying an existing Data instance.
   * @param other The existing instance to copy.
   * @return A new Data RecordBuilder
   */
  public static com.theodorecurtil.schemas.Data.Builder newBuilder(com.theodorecurtil.schemas.Data other) {
    if (other == null) {
      return new com.theodorecurtil.schemas.Data.Builder();
    } else {
      return new com.theodorecurtil.schemas.Data.Builder(other);
    }
  }

  /**
   * RecordBuilder for Data instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
    implements org.apache.avro.data.RecordBuilder<Data> {

    private java.lang.Double amount;
    private java.lang.String direction;
    private java.lang.Double index_price;
    private java.lang.String instrument_name;
    private java.lang.Double iv;
    private java.lang.Double mark_price;
    private java.lang.Double price;
    private java.lang.Integer tick_direction;
    private java.lang.Long timestamp;
    private java.lang.String trade_id;
    private java.lang.Integer trade_seq;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.theodorecurtil.schemas.Data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.direction)) {
        this.direction = data().deepCopy(fields()[1].schema(), other.direction);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.index_price)) {
        this.index_price = data().deepCopy(fields()[2].schema(), other.index_price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.instrument_name)) {
        this.instrument_name = data().deepCopy(fields()[3].schema(), other.instrument_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.iv)) {
        this.iv = data().deepCopy(fields()[4].schema(), other.iv);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.mark_price)) {
        this.mark_price = data().deepCopy(fields()[5].schema(), other.mark_price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.price)) {
        this.price = data().deepCopy(fields()[6].schema(), other.price);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.tick_direction)) {
        this.tick_direction = data().deepCopy(fields()[7].schema(), other.tick_direction);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.trade_id)) {
        this.trade_id = data().deepCopy(fields()[9].schema(), other.trade_id);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.trade_seq)) {
        this.trade_seq = data().deepCopy(fields()[10].schema(), other.trade_seq);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing Data instance
     * @param other The existing instance to copy.
     */
    private Builder(com.theodorecurtil.schemas.Data other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.direction)) {
        this.direction = data().deepCopy(fields()[1].schema(), other.direction);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.index_price)) {
        this.index_price = data().deepCopy(fields()[2].schema(), other.index_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.instrument_name)) {
        this.instrument_name = data().deepCopy(fields()[3].schema(), other.instrument_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.iv)) {
        this.iv = data().deepCopy(fields()[4].schema(), other.iv);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mark_price)) {
        this.mark_price = data().deepCopy(fields()[5].schema(), other.mark_price);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.price)) {
        this.price = data().deepCopy(fields()[6].schema(), other.price);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tick_direction)) {
        this.tick_direction = data().deepCopy(fields()[7].schema(), other.tick_direction);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.trade_id)) {
        this.trade_id = data().deepCopy(fields()[9].schema(), other.trade_id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trade_seq)) {
        this.trade_seq = data().deepCopy(fields()[10].schema(), other.trade_seq);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setAmount(java.lang.Double value) {
      validate(fields()[0], value);
      this.amount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public java.lang.String getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setDirection(java.lang.String value) {
      validate(fields()[1], value);
      this.direction = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'index_price' field.
      * @return The value.
      */
    public java.lang.Double getIndexPrice() {
      return index_price;
    }


    /**
      * Sets the value of the 'index_price' field.
      * @param value The value of 'index_price'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setIndexPrice(java.lang.Double value) {
      validate(fields()[2], value);
      this.index_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'index_price' field has been set.
      * @return True if the 'index_price' field has been set, false otherwise.
      */
    public boolean hasIndexPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'index_price' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearIndexPrice() {
      index_price = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrument_name' field.
      * @return The value.
      */
    public java.lang.String getInstrumentName() {
      return instrument_name;
    }


    /**
      * Sets the value of the 'instrument_name' field.
      * @param value The value of 'instrument_name'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setInstrumentName(java.lang.String value) {
      validate(fields()[3], value);
      this.instrument_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'instrument_name' field has been set.
      * @return True if the 'instrument_name' field has been set, false otherwise.
      */
    public boolean hasInstrumentName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'instrument_name' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearInstrumentName() {
      instrument_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'iv' field.
      * @return The value.
      */
    public java.lang.Double getIv() {
      return iv;
    }


    /**
      * Sets the value of the 'iv' field.
      * @param value The value of 'iv'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setIv(java.lang.Double value) {
      validate(fields()[4], value);
      this.iv = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'iv' field has been set.
      * @return True if the 'iv' field has been set, false otherwise.
      */
    public boolean hasIv() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'iv' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearIv() {
      iv = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'mark_price' field.
      * @return The value.
      */
    public java.lang.Double getMarkPrice() {
      return mark_price;
    }


    /**
      * Sets the value of the 'mark_price' field.
      * @param value The value of 'mark_price'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setMarkPrice(java.lang.Double value) {
      validate(fields()[5], value);
      this.mark_price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'mark_price' field has been set.
      * @return True if the 'mark_price' field has been set, false otherwise.
      */
    public boolean hasMarkPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'mark_price' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearMarkPrice() {
      mark_price = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setPrice(java.lang.Double value) {
      validate(fields()[6], value);
      this.price = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearPrice() {
      price = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tick_direction' field.
      * @return The value.
      */
    public java.lang.Integer getTickDirection() {
      return tick_direction;
    }


    /**
      * Sets the value of the 'tick_direction' field.
      * @param value The value of 'tick_direction'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setTickDirection(java.lang.Integer value) {
      validate(fields()[7], value);
      this.tick_direction = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tick_direction' field has been set.
      * @return True if the 'tick_direction' field has been set, false otherwise.
      */
    public boolean hasTickDirection() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tick_direction' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearTickDirection() {
      tick_direction = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[8], value);
      this.timestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'trade_id' field.
      * @return The value.
      */
    public java.lang.String getTradeId() {
      return trade_id;
    }


    /**
      * Sets the value of the 'trade_id' field.
      * @param value The value of 'trade_id'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setTradeId(java.lang.String value) {
      validate(fields()[9], value);
      this.trade_id = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'trade_id' field has been set.
      * @return True if the 'trade_id' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'trade_id' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearTradeId() {
      trade_id = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trade_seq' field.
      * @return The value.
      */
    public java.lang.Integer getTradeSeq() {
      return trade_seq;
    }


    /**
      * Sets the value of the 'trade_seq' field.
      * @param value The value of 'trade_seq'.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder setTradeSeq(java.lang.Integer value) {
      validate(fields()[10], value);
      this.trade_seq = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trade_seq' field has been set.
      * @return True if the 'trade_seq' field has been set, false otherwise.
      */
    public boolean hasTradeSeq() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trade_seq' field.
      * @return This builder.
      */
    public com.theodorecurtil.schemas.Data.Builder clearTradeSeq() {
      trade_seq = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Data build() {
      try {
        Data record = new Data();
        record.amount = fieldSetFlags()[0] ? this.amount : (java.lang.Double) defaultValue(fields()[0]);
        record.direction = fieldSetFlags()[1] ? this.direction : (java.lang.String) defaultValue(fields()[1]);
        record.index_price = fieldSetFlags()[2] ? this.index_price : (java.lang.Double) defaultValue(fields()[2]);
        record.instrument_name = fieldSetFlags()[3] ? this.instrument_name : (java.lang.String) defaultValue(fields()[3]);
        record.iv = fieldSetFlags()[4] ? this.iv : (java.lang.Double) defaultValue(fields()[4]);
        record.mark_price = fieldSetFlags()[5] ? this.mark_price : (java.lang.Double) defaultValue(fields()[5]);
        record.price = fieldSetFlags()[6] ? this.price : (java.lang.Double) defaultValue(fields()[6]);
        record.tick_direction = fieldSetFlags()[7] ? this.tick_direction : (java.lang.Integer) defaultValue(fields()[7]);
        record.timestamp = fieldSetFlags()[8] ? this.timestamp : (java.lang.Long) defaultValue(fields()[8]);
        record.trade_id = fieldSetFlags()[9] ? this.trade_id : (java.lang.String) defaultValue(fields()[9]);
        record.trade_seq = fieldSetFlags()[10] ? this.trade_seq : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Data>
    WRITER$ = (org.apache.avro.io.DatumWriter<Data>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Data>
    READER$ = (org.apache.avro.io.DatumReader<Data>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.amount);
    }

    if (this.direction == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.direction);
    }

    if (this.index_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.index_price);
    }

    if (this.instrument_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.instrument_name);
    }

    if (this.iv == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.iv);
    }

    if (this.mark_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.mark_price);
    }

    if (this.price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.price);
    }

    if (this.tick_direction == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.tick_direction);
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.timestamp);
    }

    if (this.trade_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trade_id);
    }

    if (this.trade_seq == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.trade_seq);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.direction = null;
      } else {
        this.direction = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.index_price = null;
      } else {
        this.index_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.instrument_name = null;
      } else {
        this.instrument_name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.iv = null;
      } else {
        this.iv = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mark_price = null;
      } else {
        this.mark_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.price = null;
      } else {
        this.price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tick_direction = null;
      } else {
        this.tick_direction = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trade_id = null;
      } else {
        this.trade_id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trade_seq = null;
      } else {
        this.trade_seq = in.readInt();
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readDouble();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.direction = null;
          } else {
            this.direction = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.index_price = null;
          } else {
            this.index_price = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.instrument_name = null;
          } else {
            this.instrument_name = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.iv = null;
          } else {
            this.iv = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mark_price = null;
          } else {
            this.mark_price = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.price = null;
          } else {
            this.price = in.readDouble();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tick_direction = null;
          } else {
            this.tick_direction = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readLong();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trade_id = null;
          } else {
            this.trade_id = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trade_seq = null;
          } else {
            this.trade_seq = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










